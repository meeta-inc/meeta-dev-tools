name: PactumJS Test Suite

on:
  # 수동 실행
  workflow_dispatch:
    inputs:
      test-type:
        description: 'Test type to run'
        required: true
        type: choice
        options:
          - single
          - grade
          - category
          - full
        default: 'single'
      grade:
        description: 'Grade (for grade tests)'
        required: false
        type: choice
        options:
          - elementary
          - middle
          - high
          - all
      category:
        description: 'Category (for category tests)'
        required: false
        type: string
      test-id:
        description: 'Test ID (for single tests)'
        required: false
        type: string
      slack-notification:
        description: 'Send Slack notification'
        required: false
        type: boolean
        default: true
      gsheet-upload:
        description: 'Upload to Google Sheets'
        required: false
        type: boolean
        default: true

  # 스케줄 실행 - 매일 새벽 2시
  schedule:
    - cron: '0 17 * * *'  # UTC 17:00 = KST 02:00

  # Push 이벤트 (pactumjs_test_new 디렉토리 변경 시)
  push:
    branches: [main, develop]
    paths:
      - 'pactumjs_test_new/**'
      - '.github/workflows/pactum-tests.yml'

  # PR 이벤트
  pull_request:
    branches: [main, develop]
    paths:
      - 'pactumjs_test_new/**'
      - '.github/workflows/pactum-tests.yml'

jobs:
  # PR에서는 간단한 테스트만 실행
  quick-test:
    name: Quick Test (PR)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create test environment file
        run: |
          mkdir -p pactumjs_test_new
          cd pactumjs_test_new
          cat > .env << EOF
          # Test Configuration
          API_BASE_URL=https://67hnjuna66.execute-api.ap-northeast-1.amazonaws.com/prd-1
          API_TIMEOUT=30000
          API_RETRIES=3
          TEST_CONCURRENCY=2
          REPORT_FORMAT=json
          OUTPUT_DIR=./reports
          
          # Mock credentials for PR testing
          AWS_ACCESS_KEY_ID=test_key
          AWS_SECRET_ACCESS_KEY=test_secret
          AWS_REGION=ap-northeast-1
          S3_BUCKET_NAME=test-bucket
          
          GOOGLE_CLIENT_EMAIL=test@test.com
          GOOGLE_PRIVATE_KEY="test_key"
          GOOGLE_SPREADSHEET_ID=test_sheet_id
          
          SLACK_WEBHOOK_URL=https://hooks.slack.com/test
          
          # Default Test Parameters
          DEFAULT_CLIENT_ID=RS000001
          DEFAULT_APP_ID=0001
          DEFAULT_USER_ID=ci_test_user
          EOF
      
      - name: Run single test
        uses: ./pactumjs_test_new/.github/actions/test-automation
        with:
          test-type: single
          test-id: ELEMENTARY_A-1
          slack-notification: false
          gsheet-upload: false
          environment: test

  # 수동 실행 테스트
  manual-test:
    name: Manual Test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create production environment file
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GOOGLE_PRIVATE_KEY: ${{ secrets.GOOGLE_PRIVATE_KEY }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          cd pactumjs_test_new
          cat > .env << EOF
          # API Configuration
          API_BASE_URL=https://67hnjuna66.execute-api.ap-northeast-1.amazonaws.com/prd-1
          API_TIMEOUT=30000
          API_RETRIES=3
          
          # Test Configuration
          TEST_CONCURRENCY=3
          REPORT_FORMAT=json
          OUTPUT_DIR=./reports
          
          # AWS Credentials
          AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
          AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
          AWS_REGION=ap-northeast-1
          S3_BUCKET_NAME=meeta-ai-navi-test
          S3_TEST_CASES_KEY=test-cases.csv
          S3_RESULTS_KEY=test-results.csv
          
          # Google API Credentials
          GOOGLE_CLIENT_EMAIL=mygooglesheets@junha-20250602-test.iam.gserviceaccount.com
          GOOGLE_PRIVATE_KEY="${GOOGLE_PRIVATE_KEY}"
          GOOGLE_SPREADSHEET_ID=1RPTo9ReD7XFCbedoI1f3pR6iKGfqYNmyWPWNvPgwn0U
          GOOGLE_SHEET_RANGE=LLM표준!A5:L1000
          GOOGLE_SERVICE_ACCOUNT_PATH=./config/service-account.json
          GOOGLE_DRIVE_FOLDER_ID=10Pv2qULZ9TOni3nOnWSfQhBbQhmIZq1l
          
          # Slack Webhook URL
          SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
          SLACK_CHANNEL=#ci-test-results
          SLACK_USERNAME=CI Bot
          
          # Default Test Parameters
          DEFAULT_CLIENT_ID=RS000001
          DEFAULT_APP_ID=0001
          DEFAULT_USER_ID=manual_test_user
          EOF
      
      - name: Run manual test
        uses: ./pactumjs_test_new/.github/actions/test-automation
        with:
          test-type: ${{ inputs.test-type }}
          grade: ${{ inputs.grade }}
          category: ${{ inputs.category }}
          test-id: ${{ inputs.test-id }}
          slack-notification: ${{ inputs.slack-notification }}
          gsheet-upload: ${{ inputs.gsheet-upload }}
          environment: production

  # 스케줄 실행 - 전체 테스트
  scheduled-test:
    name: Scheduled Full Test
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    strategy:
      matrix:
        grade: [elementary, middle, high]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create production environment file
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GOOGLE_PRIVATE_KEY: ${{ secrets.GOOGLE_PRIVATE_KEY }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          cd pactumjs_test_new
          cat > .env << EOF
          # API Configuration
          API_BASE_URL=https://67hnjuna66.execute-api.ap-northeast-1.amazonaws.com/prd-1
          API_TIMEOUT=30000
          API_RETRIES=3
          
          # Test Configuration
          TEST_CONCURRENCY=1
          REPORT_FORMAT=json
          OUTPUT_DIR=./reports
          
          # AWS Credentials
          AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
          AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
          AWS_REGION=ap-northeast-1
          S3_BUCKET_NAME=meeta-ai-navi-test
          S3_TEST_CASES_KEY=test-cases.csv
          S3_RESULTS_KEY=test-results-${{ matrix.grade }}.csv
          
          # Google API Credentials
          GOOGLE_CLIENT_EMAIL=mygooglesheets@junha-20250602-test.iam.gserviceaccount.com
          GOOGLE_PRIVATE_KEY="${GOOGLE_PRIVATE_KEY}"
          GOOGLE_SPREADSHEET_ID=1RPTo9ReD7XFCbedoI1f3pR6iKGfqYNmyWPWNvPgwn0U
          GOOGLE_SHEET_RANGE=LLM표준!A5:L1000
          GOOGLE_SERVICE_ACCOUNT_PATH=./config/service-account.json
          GOOGLE_DRIVE_FOLDER_ID=10Pv2qULZ9TOni3nOnWSfQhBbQhmIZq1l
          
          # Slack Webhook URL
          SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
          SLACK_CHANNEL=#ci-test-results
          SLACK_USERNAME=Scheduled Test Bot
          
          # Default Test Parameters
          DEFAULT_CLIENT_ID=RS000001
          DEFAULT_APP_ID=0001
          DEFAULT_USER_ID=scheduled_test_${{ matrix.grade }}
          EOF
      
      - name: Run scheduled test for ${{ matrix.grade }}
        uses: ./pactumjs_test_new/.github/actions/test-automation
        with:
          test-type: grade
          grade: ${{ matrix.grade }}
          slack-notification: true
          gsheet-upload: true
          environment: production

  # 결과 집계 및 최종 알림
  notify-results:
    name: Notify Final Results
    needs: [scheduled-test]
    runs-on: ubuntu-latest
    if: always() && (github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main'))
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-results
      
      - name: Send final notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ "${{ needs.scheduled-test.result }}" == "success" ]; then
            STATUS="✅ All tests completed successfully"
            COLOR="good"
          else
            STATUS="⚠️ Some tests failed or were skipped"
            COLOR="warning"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"text\": \"PactumJS Test Suite - Final Results\",
            \"attachments\": [{
              \"color\": \"${COLOR}\",
              \"fields\": [
                {
                  \"title\": \"Status\",
                  \"value\": \"${STATUS}\",
                  \"short\": false
                },
                {
                  \"title\": \"Workflow\",
                  \"value\": \"${{ github.workflow }}\",
                  \"short\": true
                },
                {
                  \"title\": \"Trigger\",
                  \"value\": \"${{ github.event_name }}\",
                  \"short\": true
                },
                {
                  \"title\": \"Branch\",
                  \"value\": \"${{ github.ref_name }}\",
                  \"short\": true
                },
                {
                  \"title\": \"Run ID\",
                  \"value\": \"${{ github.run_id }}\",
                  \"short\": true
                }
              ],
              \"footer\": \"PactumJS Test Automation\",
              \"ts\": $(date +%s)
            }]
          }" $SLACK_WEBHOOK_URL || echo "Slack notification failed"